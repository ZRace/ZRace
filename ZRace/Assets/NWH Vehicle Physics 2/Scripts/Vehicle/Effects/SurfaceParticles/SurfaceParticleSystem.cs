using System;
using NWH.VehiclePhysics2.GroundDetection;
using NWH.VehiclePhysics2.Powertrain;
using UnityEngine;
using Object = UnityEngine.Object;

namespace NWH.VehiclePhysics2.Effects
{
    /// <summary>
    ///     Skid smoke and surface dust generated by wheel slipping / rolling over the surface.
    /// </summary>
    [Serializable]
    public class SurfaceParticleSystem
    {
        public float lateralSlipCoeff = 0.5f;
        public float longitudinalSlipCoeff = 0.5f;
        public float particleSizeCoeff = 1f;
        public float emissionRateCoeff = 1f;
        public int particleCount;
        
        public ParticleSystem particlePS;
        public ParticleSystem chunkPS;

        public GameObject particlePrefab;
        public GameObject chunkPrefab;

        private ParticleSystem.MainModule _mainModule;
        private ParticleSystem.EmissionModule _emissionModule;
        private ParticleSystem.ShapeModule _shapeModule;
        
        private float _rateOverDistance;
        private float _rateOverTime;
        private float _smokeEmissionRateVelocity;
        private VehicleController _vc;
        private WheelComponent _wheelComponent;
        private Color _particleColor;
        private ParticleSystem.MinMaxGradient _minMaxGradient;

        [SerializeField]
        private SurfacePreset surfacePreset;

        private float _smokeEmissionRate;
        private bool _initialized;

        public void Initialize(VehicleController vc, WheelComponent wheelComponent)
        {
            _vc = vc;
            _wheelComponent = wheelComponent;

            if (!vc.groundDetection.IsEnabled || vc.groundDetection.groundDetectionPreset == null)
            {
                return;
            }

            // Initialize particles
            if (vc.groundDetection.groundDetectionPreset.particlePrefab != null)
            {
                particlePrefab = Object.Instantiate(
                    vc.groundDetection.groundDetectionPreset.particlePrefab, 
                    wheelComponent.ControllerTransform, 
                    true);
                particlePrefab.transform.position = wheelComponent.wheelController.wheel.worldPosition
                                                   - wheelComponent.wheelController.cachedTransform.up * (wheelComponent.wheelController.radius * 0.5f);
                particlePS = particlePrefab.GetComponent<ParticleSystem>();
                particlePS.name = "SurfaceParticles";

                ParticleSystem.ShapeModule shape = particlePS.shape;
                shape.radius = wheelComponent.Width * 1.5f;
                
                _shapeModule = particlePS.shape;
                _shapeModule.radius = wheelComponent.Width;
            }
            else
            {
                Debug.LogWarning("Smoke Prefab is null, wheel slip will not produce particles.");
            }

            // Initialize chunks
            if (vc.groundDetection.groundDetectionPreset.chunkPrefab != null)
            {
                chunkPrefab = Object.Instantiate(
                    vc.groundDetection.groundDetectionPreset.chunkPrefab,
                    wheelComponent.ControllerTransform, 
                    true);
                chunkPrefab.transform.position = wheelComponent.wheelController.wheel.worldPosition
                                                 - wheelComponent.wheelController.cachedTransform.up *
                                                 wheelComponent.wheelController.radius
                                                 - wheelComponent.wheelController.cachedTransform.forward *
                                                 (wheelComponent.wheelController.radius * 0.7f);
                chunkPS = chunkPrefab.GetComponent<ParticleSystem>();
                chunkPS.name = "SurfaceChunks";
                
                _shapeModule = chunkPS.shape;
                _shapeModule.radius = wheelComponent.Width;
            }
            else
            {
                Debug.LogWarning("Dust Prefab is null, there will be no surface dust.");
            }

            _initialized = true;
        }

        public void Update()
        {
            if (!_initialized)
            {
                return;
            }
            
            bool isGrounded = _wheelComponent.IsGrounded;
            surfacePreset = _wheelComponent.surfacePreset;
            particleCount = 0;

            if (!isGrounded || surfacePreset == null)
            {
                StopParticleEmission();
                StopChunkEmission();
                return;
            }
            
            UpdateParticles();
            UpdateChunks();
        }
        
        private void UpdateParticles()
        {
            if (!surfacePreset.emitParticles)
            {
                StopParticleEmission();
                return;
            }

            _mainModule = particlePS.main;
            _emissionModule = particlePS.emission;

            _mainModule.startColor = surfacePreset.particleColor;
            _mainModule.startSize = surfacePreset.particleSize * particleSizeCoeff;

            // Set lifetime based on speed
            float startLifetime = surfacePreset.particleLifeDistance / _wheelComponent.wheelController.speed;
            startLifetime = Mathf.Clamp(startLifetime, 2f, surfacePreset.maxParticleLifetime);
            _mainModule.startLifetime = startLifetime;
            
            if (surfacePreset.particleType == SurfacePreset.ParticleType.Smoke)
            {
                if (!_wheelComponent.HasLateralSlip && !_wheelComponent.HasLongitudinalSlip)
                {
                    StopParticleEmission();
                    return;
                }

                // Calculate emission rate
                float latEmission = _wheelComponent.HasLateralSlip
                    ? _wheelComponent.NormalizedLateralSlip * lateralSlipCoeff
                    : 0;
                float lngEmission = _wheelComponent.HasLongitudinalSlip ? 
                    _wheelComponent.NormalizedLongitudinalSlip * longitudinalSlipCoeff 
                    : 0f;
                float newSmokeEmissionRate = latEmission + lngEmission;
                newSmokeEmissionRate = Mathf.Clamp01(newSmokeEmissionRate) * surfacePreset.maxParticleEmissionRateOverDistance;

                _smokeEmissionRate = Mathf.SmoothDamp(_smokeEmissionRate, newSmokeEmissionRate,
                    ref _smokeEmissionRateVelocity, 1f);

                // Set start color alpha value
                _particleColor= _mainModule.startColor.color;
                _minMaxGradient = _mainModule.startColor;
                _minMaxGradient.color = new Color(_particleColor.r, _particleColor.g, _particleColor.b, 
                    Mathf.Clamp01(_smokeEmissionRate) * surfacePreset.particleMaxAlpha);
                _mainModule.startColor = _minMaxGradient;

                // Set emission rates
                float speedBias = Mathf.Clamp01(_vc.Speed / 3f);
                _rateOverDistance = speedBias * _smokeEmissionRate;
                _rateOverTime = (1f - speedBias) * _smokeEmissionRate;
                _emissionModule.rateOverDistance = _rateOverDistance * emissionRateCoeff;
                _emissionModule.rateOverTime = _rateOverTime * emissionRateCoeff;
            }
            else
            {
                // Calculate emission rate
                float dustEmissionRate = 0f;
                if (_wheelComponent.IsGrounded)
                {
                    dustEmissionRate = Mathf.Clamp01(_vc.Speed / 8f - 0.05f) * surfacePreset.maxParticleEmissionRateOverDistance;
                }

                // Set start color alpha value
                _particleColor= _mainModule.startColor.color;
                _minMaxGradient = _mainModule.startColor;
                _minMaxGradient.color = new Color(_particleColor.r, _particleColor.g, _particleColor.b, 
                    Mathf.Clamp01(dustEmissionRate * 2f) * surfacePreset.particleMaxAlpha);
                _mainModule.startColor = _minMaxGradient;
                
                // Set emission rates
                _emissionModule.rateOverTime = 0;
                _emissionModule.rateOverDistance = dustEmissionRate * emissionRateCoeff;
            }

            particleCount += particlePS.particleCount;
        }

        private void UpdateChunks()
        {            
            if (!surfacePreset.emitChunks)
            {
                StopChunkEmission();
                return;
            }

            _mainModule = chunkPS.main;
            _emissionModule = chunkPS.emission;
            
            // Set lifetime based on speed
            float startLifetime = surfacePreset.chunkLifeDistance / _wheelComponent.wheelController.speed;
            startLifetime = Mathf.Clamp(startLifetime, 0.2f, surfacePreset.maxChunkLifetime);
            _mainModule.startLifetime = startLifetime;

            float angVel = _wheelComponent.angularVelocity;
            float absAngVel = angVel < 0 ? -angVel : angVel;
            if (absAngVel < 5f)
            {
                _emissionModule.rateOverTime = 0;
                _emissionModule.rateOverDistance = 0;
            }
            else
            {
                // Set speed based on wheel angular velocity
                float tangentialWheelSpeed = _wheelComponent.angularVelocity * _wheelComponent.wheelController.radius;
                _mainModule.startSpeed = tangentialWheelSpeed * 0.2f;
                _emissionModule.rateOverTime = 0;
                _emissionModule.rateOverDistance = (_wheelComponent.NormalizedLongitudinalSlip * 0.7f + _wheelComponent.NormalizedLateralSlip * 0.3f) 
                                                   * surfacePreset.maxChunkEmissionRateOverDistance;
            }

            particleCount += chunkPS.particleCount;
        }

        private void StopParticleEmission()
        {
            _emissionModule = particlePS.emission;
            _emissionModule.rateOverDistance = 0;
            _emissionModule.rateOverTime = 0;
        }

        private void StopChunkEmission()
        {
            _emissionModule = chunkPS.emission;
            _emissionModule.rateOverDistance = 0;
            _emissionModule.rateOverTime = 0;
        }
        
        public void Enable()
        {
            if (particlePS != null && particlePS.isStopped)
            {
                particlePS.Play();
            }
            
            if (chunkPS != null && chunkPS.isStopped)
            {
                chunkPS.Play();
            }
        }

        public void Disable()
        {
            if (particlePS != null &&!particlePS.isStopped)
            {
                particlePS.Stop();
            }
            
            if (chunkPS != null &&!chunkPS.isStopped)
            {
                chunkPS.Stop();
            }
        }
    }
}